from graphviz import Digraph

# Создаем направленный граф
graph = Digraph(format='png')
graph.attr(rankdir='TB', nodesep='0.3', ranksep='0.25')  # Направление сверху вниз
graph.attr(dpi='1000')

nameCAPEC = "CAPEC-539"

# Центральный узел
graph.node(nameCAPEC, shape="box", style="filled", color="#FFB319", fontcolor="black")

# Родители и наследники
edges = {
    nameCAPEC: ['CWE-158','CWE-173','CWE-172','CWE-74','CWE-20','CWE-707'],
    'CWE-158': ['CVE-2024-0408'],
    'CWE-173': ['CVE-2023-25742'],
    'CWE-172': ['CVE-2019-10153', 'CVE-2016-3829', 'CVE-2016-3828', 'CVE-2016-3827', 'CVE-2020-2593'],
    'CWE-74': ['CVE-2022-27924', 'CVE-2021-21381', 'CVE-2022-31126', 'CVE-2020-7613', 'CVE-2020-3239', 'CVE-2021-26084', 'CVE-2022-29078', 'CVE-2020-1022', 'CVE-2020-15238', 'CVE-2023-48365', 'CVE-2023-29516', 'CVE-2023-29519', 'CVE-2020-35226', 'CVE-2017-8809', 'CVE-2020-8644', 'CVE-2019-3660', 'CVE-2020-7044', 'CVE-2024-42472', 'CVE-2019-5783', 'CVE-2020-3760', 'CVE-2020-14928', 'CVE-2022-31744', 'CVE-2019-18860', 'CVE-2020-4589', 'CVE-2024-1619', 'CVE-2022-31088', 'CVE-2022-31086', 'CVE-2020-11647', 'CVE-2023-29383', 'CVE-2021-29955', 'CVE-2022-31087', 'CVE-2020-0981', 'CVE-2020-36308', 'CVE-2020-0551', 'CVE-2018-6288', 'CVE-2023-40547', 'CVE-2021-23400', 'CVE-2021-1475', 'CVE-2013-6435', 'CVE-2021-34419', 'CVE-2023-49964', 'CVE-2020-28949', 'CVE-2019-8322', 'CVE-2019-8323', 'CVE-2020-26142', 'CVE-2022-46337', 'CVE-2019-19919', 'CVE-2021-33515', 'CVE-2019-16255', 'CVE-2020-14001', 'CVE-2023-46726', 'CVE-2019-16254', 'CVE-2020-4161', 'CVE-2020-10987', 'CVE-2021-21353', 'CVE-2022-30287', 'CVE-2021-23192', 'CVE-2022-20693', 'CVE-2020-7604', 'CVE-2023-44270', 'CVE-2023-42346', 'CVE-2023-22527', 'CVE-2019-18348', 'CVE-2020-7475', 'CVE-2020-26140', 'CVE-2019-25031', 'CVE-2020-26137', 'CVE-2022-22975', 'CVE-2021-38458', 'CVE-2021-38395', 'CVE-2018-7829', 'CVE-2018-7826', 'CVE-2022-31593', 'CVE-2018-7825', 'CVE-2019-19330', 'CVE-2020-14954', 'CVE-2019-0869', 'CVE-2019-1680', 'CVE-2022-31657', 'CVE-2017-18266', 'CVE-2021-38290', 'CVE-2020-23148', 'CVE-2022-36323', 'CVE-2021-22035', 'CVE-2020-17496', 'CVE-2019-8948', 'CVE-2019-0319', 'CVE-2019-18889', 'CVE-2023-29524', 'CVE-2023-29526', 'CVE-2023-29518', 'CVE-2020-24821', 'CVE-2020-5245', 'CVE-2021-33195', 'CVE-2020-24826', 'CVE-2024-21687', 'CVE-2023-44373', 'CVE-2020-24825', 'CVE-2022-20001', 'CVE-2019-25136', 'CVE-2022-34903', 'CVE-2023-30547', 'CVE-2020-9688', 'CVE-2015-0169', 'CVE-2020-3956', 'CVE-2023-29527', 'CVE-2020-14433', 'CVE-2020-9410', 'CVE-2019-13714', 'CVE-2022-23614', 'CVE-2022-43769', 'CVE-2021-38371', 'CVE-2017-5630', 'CVE-2017-17522', 'CVE-2020-11979', 'CVE-2020-13671', 'CVE-2020-9314', 'CVE-2023-29400', 'CVE-2023-24540', 'CVE-2018-5172', 'CVE-2015-1762', 'CVE-2016-7125', 'CVE-2024-22319', 'CVE-2021-4181', 'CVE-2019-15014', 'CVE-2022-45801', 'CVE-2020-4627', 'CVE-2023-29007', 'CVE-2020-14434', 'CVE-2020-14436', 'CVE-2020-14435', 'CVE-2019-15020', 'CVE-2020-24822', 'CVE-2020-24823', 'CVE-2023-41580', 'CVE-2021-22232', 'CVE-2023-43655', 'CVE-2013-6501', 'CVE-2024-33883', 'CVE-2020-1481', 'CVE-2019-1939', 'CVE-2023-26130', 'CVE-2015-5841', 'CVE-2023-24539', 'CVE-2020-1327', 'CVE-2023-25616', 'CVE-2024-21676', 'CVE-2023-37580', 'CVE-2021-45658', 'CVE-2021-22204', 'CVE-2021-30506', 'CVE-2021-3197', 'CVE-2024-38366', 'CVE-2022-46873', 'CVE-2021-42663', 'CVE-2023-39213', 'CVE-2022-23064', 'CVE-2024-21900', 'CVE-2023-25617', 'CVE-2016-1155', 'CVE-2023-36470', 'CVE-2023-36469', 'CVE-2023-36471', 'CVE-2020-5259', 'CVE-2023-29525', 'CVE-2023-29522', 'CVE-2023-50445', 'CVE-2024-1551', 'CVE-2017-0154', 'CVE-2023-33234', 'CVE-2019-17361', 'CVE-2017-17790', 'CVE-2024-25742', 'CVE-2024-25743'],
    'CWE-20': ['CVE-2022-21412', 'CVE-2021-4211', 'CVE-2013-4636', 'CVE-2021-4212', 'CVE-2022-29913', 'CVE-2022-29115', 'CVE-2022-29897', 'CVE-2021-35560', 'CVE-2021-35683', 'CVE-2022-25310', 'CVE-2022-1637', 'CVE-2022-29105', 'CVE-2022-26937', 'CVE-2022-26926', 'CVE-2022-26927', 'CVE-2022-28613', 'CVE-2022-21491', 'CVE-2021-41079', 'CVE-2022-29130', 'CVE-2022-29129', 'CVE-2022-22013', 'CVE-2022-22166', 'CVE-2021-27596', 'CVE-2013-4248', 'CVE-2022-22019', 'CVE-2022-30130', 'CVE-2022-26903', 'CVE-2022-1529', 'CVE-2022-29141', 'CVE-2022-29137', 'CVE-2022-29131', 'CVE-2013-3735', 'CVE-2022-29144', 'CVE-2022-29128', 'CVE-2022-22014', 'CVE-2022-20120', 'CVE-2022-22012', 'CVE-2022-29139', 'CVE-2022-21420', 'CVE-2016-5674', 'CVE-2022-21404', 'CVE-2022-21434', 'CVE-2022-21440', 'CVE-2022-21459', 'CVE-2022-21478', 'CVE-2022-21454', 'CVE-2022-21444', 'CVE-2022-21479', 'CVE-2022-21457', 'CVE-2022-21438', 'CVE-2022-21436', 'CVE-2021-36961', 'CVE-2022-1500', 'CVE-2022-1494', 'CVE-2022-1492', 'CVE-2022-21493', 'CVE-2022-21446', 'CVE-2022-21494', 'CVE-2022-21413', 'CVE-2017-17215', 'CVE-2022-21427', 'CVE-2021-30254', 'CVE-2022-21417', 'CVE-2022-21430', 'CVE-2022-21437', 'CVE-2022-21452', 'CVE-2022-21424', 'CVE-2017-6327', 'CVE-2022-21425', 'CVE-2022-21422', 'CVE-2022-21410', 'CVE-2021-34499', 'CVE-2022-21411', 'CVE-2022-21409', 'CVE-2022-21482', 'CVE-2022-21483', 'CVE-2022-21490', 'CVE-2022-21435', 'CVE-2022-21418', 'CVE-2022-21415', 'CVE-2022-21414', 'CVE-2022-21431', 'CVE-2022-21498', 'CVE-2012-3556', 'CVE-2022-30129', 'CVE-2022-26917', 'CVE-2022-26916', 'CVE-2021-2365', 'CVE-2021-2420', 'CVE-2021-2431', 'CVE-2021-2430', 'CVE-2021-2343', 'CVE-2021-2455', 'CVE-2021-2368', 'CVE-2021-2353', 'CVE-2021-2434', 'CVE-2021-2366', 'CVE-2021-2378', 'CVE-2021-2381', 'CVE-2021-2446', 'CVE-2021-2447', 'CVE-2021-2373', 'CVE-2021-2324', 'CVE-2022-26898', 'CVE-2022-26915', 'CVE-2013-3896', 'CVE-2022-29109', 'CVE-2022-28843', 'CVE-2022-28841', 'CVE-2022-23268', 'CVE-2022-30168', 'CVE-2022-30157', 'CVE-2022-30136', 'CVE-2021-2338', 'CVE-2021-2355', 'CVE-2021-2419', 'CVE-2021-2393', 'CVE-2021-2457', 'CVE-2021-2361', 'CVE-2021-2398', 'CVE-2021-2358', 'CVE-2021-2334', 'CVE-2021-2336', 'CVE-2021-2333', 'CVE-2021-2328', 'CVE-2022-29108', 'CVE-2022-29110', 'CVE-2021-2380', 'CVE-2022-29148', 'CVE-2021-2415', 'CVE-2021-2406', 'CVE-2021-2394', 'CVE-2021-2329', 'CVE-2022-30233', 'CVE-2022-21464', 'CVE-2022-1867', 'CVE-2019-15709', 'CVE-2022-24545', 'CVE-2022-24543', 'CVE-2022-26134', 'CVE-2021-2405', 'CVE-2022-24495', 'CVE-2022-25162', 'CVE-2022-25161', 'CVE-2022-24541', 'CVE-2022-20726', 'CVE-2022-24487', 'CVE-2022-24532', 'CVE-2022-26784', 'CVE-2012-1172', 'CVE-2021-2397', 'CVE-2021-2360', 'CVE-2021-2344', 'CVE-2022-26918', 'CVE-2021-2453', 'CVE-2021-2451', 'CVE-2021-2438', 'CVE-2021-2330', 'CVE-2022-24484', 'CVE-2022-24548', 'CVE-2022-24538', 'CVE-2022-22021', 'CVE-2022-20745', 'CVE-2021-2458', 'CVE-2021-2349', 'CVE-2021-2391', 'CVE-2021-2460', 'CVE-2022-24382', 'CVE-2021-2463', 'CVE-2021-2382', 'CVE-2022-26830', 'CVE-2022-26924', 'CVE-2022-26919', 'CVE-2022-26831', 'CVE-2021-2347', 'CVE-2023-23401', 'CVE-2023-24868', 'CVE-2023-24907'],
    'CWE-707': ['CVE-2024-43572', 'CVE-2020-11080'],
}

# Группируем узлы CWE на одном уровне
with graph.subgraph() as s:
    s.attr(rank='same')
    for cwe in edges[nameCAPEC]:
        s.node(cwe, shape="box", style="filled", color="#FFC34D", fontcolor="black")

# Функция для добавления узлов и связей
def add_edges(parent, children, limit=20):
    group_counter = 0
    rank_groups = []  # Хранение групп для каждого rank

    # Разбиваем детей на группы по limit
    for i in range(0, len(children), limit):
        group = children[i:i + limit]
        rank_groups.append(group)
        group_counter += 1

    # Создаем узлы и добавляем связи
    for group in rank_groups:
        with graph.subgraph() as s:
            s.attr(rank='same')  # Один уровень для группы
            previous_node = None
            for idx, child in enumerate(group):
                graph.node(child, shape="box", style="filled", color="#FFDD99", fontcolor="black")
                if idx == 0 and not previous_node:
                    # Первый элемент группы соединяем с родителем
                    graph.edge(parent, child, color="black")
                elif previous_node:
                    # Последующие элементы соединяем друг с другом
                    graph.edge(previous_node, child, color="black")
                previous_node = child


# Добавляем связи начиная с центрального узла
for parent, children in edges.items():
    if parent != nameCAPEC:  # Обрабатываем только дочерние элементы
        add_edges(parent, children, limit=20)

# Добавляем связи от центрального узла к каждому CWE
for cwe in edges[nameCAPEC]:
    graph.edge(nameCAPEC, cwe, color="black")


# Рендерим граф
graph.render("C:/Users/user/Desktop/Диплом/diplom/graph", cleanup=True)
